version: "3.3"

services:

  api:
    build:
      context: .
    image: friends-backend
    env_file: docker-compose.env
    environment:
      SERVICES: api
      PORT: 3000
    depends_on:
      - nats
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gw.rule=PathPrefix(`/`)"
      - "traefik.http.services.api-gw.loadbalancer.server.port=3000"
    networks:
      - internal

  greeter:
    build:
      context: .
    image: friends-backend
    env_file: docker-compose.env
    environment:
      SERVICES: greeter
    depends_on:
      - nats
    networks:
      - internal

  products:
    build:
      context: .
    image: friends-backend
    env_file: docker-compose.env
    environment:
      SERVICES: products
    depends_on:
      - mongo
      - nats
    networks:
      - internal

  mongo:
    image: mongo:4
    volumes:
      - data:/data/db
    networks:
      - internal

  nats:
    image: nats:2
    networks:
      - internal

  traefik:
    image: traefik:v2.1
    command:
      - "--api.insecure=true" # Don't do that in production!
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
    ports:
      - 3000:80
      - 3001:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - internal
      - default

  redis:
    image: redis
    ports:
      - 6379:6379

  outgoing-proxy-service:
    image: spike-porxy-service
    environment:
      MODE: outgoing
      PORT: 8000
      SPIKE_REDIS_HOST: redis://redis
      SPIKE_CLIENT_ID: aXzoxtIFbLVjebyr0~ppCQFxfsv3ZLNkHBrkyfhz
      SPIKE_CLIENT_SECRET: XUneSMVVJhsGfmVPjjGzZgySdH4hmrNKbXGn5Iupjc68R361v_MuRy_XzBOeCnm3dSNWNU_JBsbWUus7UyVXmvj4cO0GW7am11Ex
      SPIKE_URL: https://ospike.northeurope.cloudapp.azure.com/oauAth2/token
      TOKEN_GRANT_TYPE: client_credentials
      USE_REDIS: 'true'
      OUTGOING_SERVICES: '[{"route":"/kartoffel/*","pathRewrite":{"^/kartoffel":""},"target":"http://kartoffel-master.eastus.cloudapp.azure.com:3001","audience":"kartoffel"}]'
    ports:
      - 8010:8000

  authentication-service:
    image: authentication-service
    build: .
    ports:
      - '8004:3000'
    env_file:
      - .env
    
      
networks:
  internal:

volumes:
  data:
